name: "Train Issues Model"

on:
  workflow_call:
    inputs:
      data_cache_key:
        description: "The optional cache key suffix to use for loading the data"
        type: string
      model_cache_key:
        description: "The cache key suffix to use for saving the model"
        type: string
        required: true

permissions:
  actions: write

env:
  DATA_PATH: labeler-cache/issue-data.tsv
  DATA_CACHE_KEY: issue-labeler/issues/data${{ inputs.data_cache_key && format('/{0}', inputs.data_cache_key) }}
  MODEL_PATH: labeler-cache/issue-model.zip
  MODEL_CACHE_KEY: issue-labeler/issues/model/${{ inputs.model_cache_key }}
  BACKUP_CACHE_KEY: issue-labeler/issues/model/${{ inputs.model_cache_key }}/backup
  GH_TOKEN: ${{ github.token }}

jobs:
  train-issues:
    runs-on: ubuntu-24.04
    steps:
      - name: "Check out the 'dotnet/issue-labeler' repo"
        uses: actions/checkout@v4
        with:
          repository: dotnet/issue-labeler

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      # Restore from cache after checkout out the repo to prevent
      # the restored files from getting removed during checkout
      - name: "Restore data from cache"
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.DATA_PATH }}
          key: ${{ env.DATA_CACHE_KEY }}
          fail-on-cache-miss: true

      - name: "Restore existing model cache entry if one exists"
        id: check-cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.MODEL_PATH }}
          key: ${{ env.MODEL_CACHE_KEY }}
          fail-on-cache-miss: false

      - name: "Check for existing backup cache entry"
        id: check-backup
        if: ${{ steps.check-cache.outputs.cache-hit == 'true' }}
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.MODEL_PATH }}
          key: ${{ env.BACKUP_CACHE_KEY }}
          lookup-only: true
          fail-on-cache-miss: false

      - name: "Abort if backup cache entry already exists"
        if: ${{ steps.check-backup.outputs.cache-hit == 'true' }}
        run: |
            echo "Cannot save backup of existing model. Backup cache key already exists."
            echo "Key: ${{ env.BACKUP_CACHE_KEY }}"

            exit 1

      - name: "Cache backup of existing model"
        if: ${{ steps.check-cache.outputs.cache-hit == 'true' }}
        id: backup-model
        uses: actions/cache/save@v4
        with:
          path: ${{ env.MODEL_PATH }}
          key: ${{ env.BACKUP_CACHE_KEY }}

      - name: "Delete restored model"
        if: ${{ steps.check-cache.outputs.cache-hit == 'true' }}
        run: |
            rm ${{ env.MODEL_PATH }}

      - name: "Run Trainer"
        run: |
          dotnet run -c Release --project ./src/Trainer --  \
            ${{ format('--issue-data "{0}"', env.DATA_PATH) }} \
            ${{ format('--issue-model "{0}"', env.MODEL_PATH) }}

      - name: "Delete existing model cache entry"
        if: ${{ steps.check-cache.outputs.cache-hit == 'true' }}
        run: |
            gh api --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/actions/caches?key=${{ env.MODEL_CACHE_KEY }}

      - name: "Save model to cache"
        uses: actions/cache/save@v4
        with:
          path: ${{ env.MODEL_PATH }}
          key: ${{ env.MODEL_CACHE_KEY }}
